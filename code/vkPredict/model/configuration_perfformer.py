from transformers import PretrainedConfig
from typing import Literal

class PerfformerConfig(PretrainedConfig):
    model_type = "perfformer"

    def __init__(
        self,
        vocab_size=40000,
        hidden_size=768,
        num_hidden_layers=12,
        num_attention_heads=12,
        intermediate_size=3072,
        hidden_act="gelu",
        hidden_dropout_prob=0.1,
        attention_probs_dropout_prob=0.1,
        max_position_embeddings=4096,
        type_vocab_size=1,
        initializer_range=0.02,
        layer_norm_eps=1e-12,
        pad_token_id=1,
        bos_token_id=0,
        eos_token_id=2,
        # Choose from ['absolute-learnable', 'rope', ...]
        position_embedding_type: Literal[
            'absolute-learnable', 'rope', 'absolute-sine'
        ]="absolute-learnable",
        use_cache=True,
        classifier_dropout=None,
        # Choose from [
        #   'vanilla', ]
        attention_type: Literal[
            'vanilla',
            'xformers-memeff', 'xformers-memeff-nomask',
            'torch-flash-nomask', 'torch-memeff-nomask'
        ]='vanilla',
        trace_label_embedding_type: Literal[
            'none',  # none
            'sine',  # generated by trace_label
            'input', # input with trace_embedding
            'binary-learnable'  # binary -> separate embedding for each
        ] = 'none',
        trace_label_binary_embedding_max_length: int=48,
        # hidden dim for regression head
        regression_hidden_dim=None,
        regression_dropout=None,
        regression_head_configuration: Literal[
            'bos-reduction', 'seq-sum-reduction'
        ] = 'bos-reduction',
        **kwargs,
    ):
        super().__init__(pad_token_id=pad_token_id, bos_token_id=bos_token_id, eos_token_id=eos_token_id, **kwargs)

        self.vocab_size = vocab_size
        self.hidden_size = hidden_size
        self.num_hidden_layers = num_hidden_layers
        self.num_attention_heads = num_attention_heads
        self.hidden_act = hidden_act
        self.intermediate_size = intermediate_size
        self.hidden_dropout_prob = hidden_dropout_prob
        self.attention_probs_dropout_prob = attention_probs_dropout_prob
        self.max_position_embeddings = max_position_embeddings
        self.type_vocab_size = type_vocab_size
        self.initializer_range = initializer_range
        self.layer_norm_eps = layer_norm_eps
        self.position_embedding_type = position_embedding_type
        self.use_cache = use_cache
        self.classifier_dropout = classifier_dropout
        self.attention_type = attention_type
        self.trace_label_embedding_type = trace_label_embedding_type
        self.trace_label_binary_embedding_max_length = trace_label_binary_embedding_max_length
        self.regression_hidden_dim = regression_hidden_dim
        self.regression_dropout = regression_dropout
        self.regression_head_configuration = regression_head_configuration
        self.keys_to_ignore_at_inference = ["mlm_logits"]
